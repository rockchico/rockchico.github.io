{"pageProps":{"post":{"mdxSource":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A sample post with markdown.\"), mdx(\"h2\", {\n    \"id\": \"inline-highlighting\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#inline-highlighting\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Inline Highlighting\"), mdx(\"p\", null, \"Sample of inline highlighting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sum = parseInt(num1) + parseInt(num2)\")), mdx(\"h2\", {\n    \"id\": \"code-blocks\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#code-blocks\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Code Blocks\"), mdx(\"p\", null, \"Some Javascript code\"), mdx(\"pre\", {\n    \"className\": \"language-javascript\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"var\"), \" num1\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" num2\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" sum\\nnum1 \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"prompt\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-green\"\n  }, \"'Enter first number'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \"\\nnum2 \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"prompt\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-green\"\n  }, \"'Enter second number'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \"\\nsum \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"parseInt\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"num1\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"+\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"parseInt\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"num2\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400 italic\"\n  }, \"// \\\"+\\\" means \\\"add\\\"\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"alert\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-green\"\n  }, \"'Sum = '\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"+\"), \" sum\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400 italic\"\n  }, \"// \\\"+\\\" means combine into a string\"), \"\\n\")), mdx(\"p\", null, \"Some Python code \\uD83D\\uDC0D\"), mdx(\"pre\", {\n    \"className\": \"language-python\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"def\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"fib\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \":\"), \"\\n    a\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" b \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"0\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"1\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"while\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-red\"\n  }, \"True\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \":\"), \"            \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400 italic\"\n  }, \"# First iteration:\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"yield\"), \" a            \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400 italic\"\n  }, \"# yield 0 to start with and then\"), \"\\n        a\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" b \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" b\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" a \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"+\"), \" b    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400 italic\"\n  }, \"# a will now be 1, and b will also be 1, (0 + 1)\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"for\"), \" index\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" fibonacci_number \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"in\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"zip\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"range\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"10\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" fib\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \":\"), \"\\n     \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"print\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-green\"\n  }, \"'{i:3}: {f:3}'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"format\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \"index\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" f\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \"fibonacci_number\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \"\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>A sample post with markdown.</p><h2 id=\"inline-highlighting\"><a href=\"#inline-highlighting\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Inline Highlighting</h2><p>Sample of inline highlighting <code>sum = parseInt(num1) + parseInt(num2)</code></p><h2 id=\"code-blocks\"><a href=\"#code-blocks\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Code Blocks</h2><p>Some Javascript code</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"text-code-purple\">var</span> num1<span class=\"text-code-white\">,</span> num2<span class=\"text-code-white\">,</span> sum\nnum1 <span class=\"\">=</span> <span class=\"text-code-blue\">prompt</span><span class=\"text-code-white\">(</span><span class=\"text-code-green\">&#x27;Enter first number&#x27;</span><span class=\"text-code-white\">)</span>\nnum2 <span class=\"\">=</span> <span class=\"text-code-blue\">prompt</span><span class=\"text-code-white\">(</span><span class=\"text-code-green\">&#x27;Enter second number&#x27;</span><span class=\"text-code-white\">)</span>\nsum <span class=\"\">=</span> <span class=\"text-code-blue\">parseInt</span><span class=\"text-code-white\">(</span>num1<span class=\"text-code-white\">)</span> <span class=\"\">+</span> <span class=\"text-code-blue\">parseInt</span><span class=\"text-code-white\">(</span>num2<span class=\"text-code-white\">)</span> <span class=\"text-gray-400 italic\">// &quot;+&quot; means &quot;add&quot;</span>\n<span class=\"text-code-blue\">alert</span><span class=\"text-code-white\">(</span><span class=\"text-code-green\">&#x27;Sum = &#x27;</span> <span class=\"\">+</span> sum<span class=\"text-code-white\">)</span> <span class=\"text-gray-400 italic\">// &quot;+&quot; means combine into a string</span>\n</code></pre><p>Some Python code 🐍</p><pre class=\"language-python\"><code class=\"language-python\"><span class=\"text-code-purple\">def</span> <span class=\"text-code-blue\">fib</span><span class=\"text-code-white\">(</span><span class=\"text-code-white\">)</span><span class=\"text-code-white\">:</span>\n    a<span class=\"text-code-white\">,</span> b <span class=\"\">=</span> <span class=\"\">0</span><span class=\"text-code-white\">,</span> <span class=\"\">1</span>\n    <span class=\"text-code-purple\">while</span> <span class=\"text-code-red\">True</span><span class=\"text-code-white\">:</span>            <span class=\"text-gray-400 italic\"># First iteration:</span>\n        <span class=\"text-code-purple\">yield</span> a            <span class=\"text-gray-400 italic\"># yield 0 to start with and then</span>\n        a<span class=\"text-code-white\">,</span> b <span class=\"\">=</span> b<span class=\"text-code-white\">,</span> a <span class=\"\">+</span> b    <span class=\"text-gray-400 italic\"># a will now be 1, and b will also be 1, (0 + 1)</span>\n\n<span class=\"text-code-purple\">for</span> index<span class=\"text-code-white\">,</span> fibonacci_number <span class=\"text-code-purple\">in</span> <span class=\"\">zip</span><span class=\"text-code-white\">(</span><span class=\"\">range</span><span class=\"text-code-white\">(</span><span class=\"\">10</span><span class=\"text-code-white\">)</span><span class=\"text-code-white\">,</span> fib<span class=\"text-code-white\">(</span><span class=\"text-code-white\">)</span><span class=\"text-code-white\">)</span><span class=\"text-code-white\">:</span>\n     <span class=\"text-code-purple\">print</span><span class=\"text-code-white\">(</span><span class=\"text-code-green\">&#x27;{i:3}: {f:3}&#x27;</span><span class=\"text-code-white\">.</span><span class=\"\">format</span><span class=\"text-code-white\">(</span>i<span class=\"\">=</span>index<span class=\"text-code-white\">,</span> f<span class=\"\">=</span>fibonacci_number<span class=\"text-code-white\">)</span><span class=\"text-code-white\">)</span>\n</code></pre>","scope":{}},"frontMatter":{"wordCount":121,"readingTime":{"text":"1 min read","minutes":0.595,"time":35699.99999999999,"words":119},"slug":"code-sample","fileName":"code-sample.md","title":"Sample .md file","date":"2016-03-08","tags":["markdown","code","features"],"draft":false,"summary":"Example of a markdown file with code blocks and syntax highlighting"}},"prev":null,"next":{"title":"O Canada","date":"2017-07-15","tags":["holiday","canada","images"],"draft":false,"summary":"The scenic lands of Canada featuring maple leaves, snow-capped mountains, turquoise lakes and Toronto. Take in the sights in this photo gallery exhibition and see how easy it is to replicate with some MDX magic and tailwind classes.","slug":"pictures-of-canada"}},"__N_SSG":true}